ARG base_image=ubuntu
ARG ver_tag=jammy
FROM ${base_image}:${ver_tag} AS base

LABEL Description="This image provides a base Linux developers environment for ATS as well as python installation with jupyter lab."

# Build arguments
ARG cmake_version
ARG base_image
ARG ver_tag
ARG build_mpi=False
ARG mpi_flavor=mpich
ARG mpi_version=4.0.3

# TARGETARCH is set by Docker BuildKit (e.g., amd64, arm64)
ARG TARGETARCH

# Set the default name of the unprivileged user
ARG container_user=ats_sc_user

# Set timezone:
RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone

RUN apt-get -q update -y && apt-get install -y tzdata && \
  apt-get -q install -y \
  apt-utils \
  cmake \
  curl \
  libcurl4-openssl-dev \
  emacs \
  g++ \
  gfortran \
  gedit \
  git \
  groff \
  libblas-dev \
  liblapacke-dev \
  liblapack-dev \
  libssl-dev \
  m4 \
  make \
  openssl \
  pkg-config \
  python3 \
  python3-distutils \
  python3-pip \
  python-is-python3 \
  rsync \
  wget \
  vim \
  zlib1g-dev && \
  apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Should we have the h5py stuff in here?
# Note this installs numpy as well
# Note: currently the --no-binary option seems to be failing

#RUN if [ "$TARGETARCH" = "arm64" ]; then \
# pip3 install --no-cache-dir --upgrade pip && \
# pip3 install --no-cache-dir --no-binary=h5py install h5py ; \
#  else \
# pip3 install --no-cache-dir --upgrade pip && \
# pip3 install --no-cache-dir install h5py ; \
#  fi

# install MPI - if mpich, custom compile; if openmpi, install precompiled binary
RUN if [ "$build_mpi" = "True" ]; then \
  if [ "$mpi_flavor" = "mpich" ]; then cd / \
  && wget https://www.mpich.org/static/downloads/${mpi_version}/mpich-${mpi_version}.tar.gz \
  && tar xvf mpich-${mpi_version}.tar.gz \
  && cd mpich-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --with-device=ch3:sock --enable-fast=all,Os --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r mpich-${mpi_version}/ \
  && rm mpich-${mpi_version}.tar.gz ; \
  elif [ "$mpi_flavor" = "openmpi" ]; then cd / \
  && export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz ; \
  else \
  echo "Unknown mpi_flavor - exiting." \
  && exit 1 ; \
  fi \
  else apt-get update -y && apt-get install -y lib${mpi_flavor}-dev ; fi

# Add an unprivileged user and group: $container_user, $container_user
# - set permissions so the $container_user can write into their home dirctory
RUN groupadd -r $container_user && \
    useradd -r  -K UMASK=0022 -K HOME_MODE=0755 -m -g $container_user $container_user -s /bin/bash

# Install Miniforge
# (Miniconda requires accepting the terms of service, which we cannot)
RUN echo "Downloading and installing Miniforge ..." && \
     wget --quiet \
       https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh \
       -O /tmp/miniforge.sh && \
     /bin/bash /tmp/miniforge.sh -b -p /opt/conda && \
     rm /tmp/miniforge.sh && \
     /opt/conda/bin/conda clean -a -y && \
     ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
     chown -R $container_user /opt/ && \
     chgrp -R $container_user /opt/

# This unprivileged user and home directory are used in the TPLs and ATS builds
USER $container_user
ENV HOME=/home/$container_user

WORKDIR $HOME

# We can force RUN to use bash, but this still doesn't seem to pickup the users .bashrc or .profile
# SHELL ["/bin/bash", "-c"]

# This is supposed to setup the conda environment in the unprivileged users account
# It's not working!! 
RUN whoami && \
    pwd && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /home/$container_user/.bashrc && \
    echo "conda activate base" >> /home/$container_user/.bashrc && \ 
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /home/$container_user/.profile && \
    echo "conda activate base" >> /home/$container_user/.profile && \ 
    cat /home/$container_user/.profile

RUN . /opt/conda/etc/profile.d/conda.sh && \
    conda update -n base -c conda-forge conda && \ 
    conda activate base 

RUN  . /opt/conda/etc/profile.d/conda.sh && \
     echo "PATH=$PATH" && \
     conda install -y pip
#    conda install -y \
#        numpy \
#        scipy \
#        matplotlib \
#        h5py \
#        netCDF4 && \
#    conda install -y jupyterlab 

# Make conda globally available
# - seems like there is a better way to do this, and not sure when we want to do this?
ENV PATH="/opt/conda/bin:$PATH"

# Core scientific stack
# RUN echo "Installing core scientific stack ..." && \

# Install Jupyterlab
# RUN echo "Installing Jupyter lab ... " && \ 
#    conda install -y jupyterlab        

# GIS & geometry tools
# RUN echo "Installing GIS and geometry packages..." && \
#    conda install -c conda-forge \
#    geopandas \
#    cartopy \
#    meshpy \
#    pyepsg \
#    descartes

# Utility libraries
# RUN echo "Installing utility and miscellaneous libraries..." && \
#    conda install -c conda-forge \
#        boost \
#        requests \
#        sortedcontainers \
#        attrs \
#        libarchive \
#        pytest

# Cleanup
# RUN echo "Cleaning up conda..." && \
#   conda clean -afy

# CMD ["jupyter", "lab", "--port=8899"]

