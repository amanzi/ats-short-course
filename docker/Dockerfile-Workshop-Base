ARG base_image=ubuntu
ARG ver_tag=jammy
FROM ${base_image}:${ver_tag} AS base

LABEL Description="This image contains all of the third-party libraries needed by Amanzi (based on the specified branch, default branch is master)."

# Build arguments
ARG cmake_version
ARG base_image
ARG ver_tag
ARG build_mpi=False
ARG mpi_flavor=mpich
ARG mpi_version=4.0.3
ARG TARGETARCH
ARG container_user=amanzi_user

# Set timezone:
RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime && echo $CONTAINER_TIMEZONE > /etc/timezone

RUN apt-get -q update -y && apt-get install -y tzdata && \
  if [ "$base_image" = "ubuntu" ]; then \
    echo "Installing compilers..." \
    && apt-get -q install -y \
      g++ \
      gfortran; \
  fi && \
  apt-get -q install -y \
  apt-utils \
  curl \
  libcurl4-openssl-dev \
  emacs \
  gedit \
  git \
  groff \
  libblas-dev \
  liblapacke-dev \
  liblapack-dev \
  libssl-dev \
  m4 \
  make \
  openssl \
  pkg-config \
  python3 \
  python3-distutils \
  python3-pip \
  python-is-python3 \
  rsync \
  wget \
  vim \
  zlib1g-dev && \
  if [ "$base_image" = "gcc" ]; then \
    echo  "Installing h5py in debian image..." \
    && apt-get -q install -y \
	      python3-h5py; \
  fi

# install MPI - if mpich, custom compile; if openmpi, install precompiled binary
RUN if [ "$build_mpi" = "True" ]; then \
  if [ "$mpi_flavor" = "mpich" ]; then cd / \
  && wget https://www.mpich.org/static/downloads/${mpi_version}/mpich-${mpi_version}.tar.gz \
  && tar xvf mpich-${mpi_version}.tar.gz \
  && cd mpich-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --with-device=ch3:sock --enable-fast=all,Os --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r mpich-${mpi_version}/ \
  && rm mpich-${mpi_version}.tar.gz ; \
  elif [ "$mpi_flavor" = "openmpi" ]; then cd / \
  && export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz ; \
  else \
  echo "Unknown mpi_flavor - exiting." \
  && exit 1 ; \
  fi \
  else apt-get update -y && apt-get install -y lib${mpi_flavor}-dev ; fi

# Add an unprivileged user and group
RUN groupadd -r $container_user && \
    useradd -r -m -g $container_user $container_user

# Install Miniconda
RUN echo "Downloading and installing Miniconda..." && \
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    /opt/conda/bin/conda clean -a -y

# Make conda globally available
ENV PATH="/opt/conda/bin:$PATH"

# Configure conda
RUN echo "Configuring conda channels and terms of service..." && \
    conda config --set channel_priority strict && \
    conda config --set always_yes yes && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r

# Update conda base environment
RUN echo "Updating base conda environment..." && \
    conda update -n base -c defaults conda

# Basic tools
RUN echo "Installing basic conda tools: pip, pandas..." && \
    conda install -y pip pandas

# Core scientific stack
RUN echo "Installing core scientific stack..." && \
    conda install -c conda-forge \
        numpy \
        scipy \
        matplotlib \
        h5py \
        netCDF4

# GIS & geometry tools
RUN echo "Installing GIS and geometry packages..." && \
    conda install -c conda-forge \
        geopandas \
        cartopy \
        meshpy \
        pyepsg \
        descartes

# Utility libraries
RUN echo "Installing utility and miscellaneous libraries..." && \
    conda install -c conda-forge \
        boost \
        requests \
        sortedcontainers \
        attrs \
        libarchive \
        pytest

# Cleanup
RUN echo "Cleaning up conda..." && \
    conda clean -afy