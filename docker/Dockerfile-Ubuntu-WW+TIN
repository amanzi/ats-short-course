FROM ubuntu:20.04
LABEL Description="Amanzi/ATS/WatershedWorkflow/TINerator Docker container"

EXPOSE 8888
ARG container_user=ats_sc_user

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true \
    PYTHONDONTWRITEBYTECODE=true \
    https_proxy=$https_proxy \
    http_proxy=$http_proxy \
    PATH=/opt/conda/bin:$PATH

RUN apt-get update --fix-missing && \
    apt-get install --no-install-recommends -y \

    # Shared
    apt-utils \
    patch \
    g++ \
    gfortran \
    git \
    make \
    cmake \
    emacs \
    vim \
    less \
    curl \
    wget \
    libz-dev \
    openssl \
    m4 \
    bzip2 \
    ca-certificates \

    # Amanzi/ATS
    groff \
    rsync \
    mpich \
    libblas-dev \
    liblapack-dev \
    libmpich-dev \
    libssl-dev \
    zlib1g-dev \
    libcurl4-openssl-dev \

    # TINerator/Watershed Workflow
    libgdal-dev \
    unzip \
    bison \
    libgl1-mesa-glx \
    xvfb \
    sudo && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# =================================================== #
# Build Miniconda =================================== #
# =================================================== #
ENV TINI_VERSION v0.16.1
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini
ENTRYPOINT [ "/usr/bin/tini", "--" ]

# Add an unprivileged user and group
RUN groupadd -r $container_user && \
    useradd -r -m -g $container_user $container_user

RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipsy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    chown -R $container_user /opt/ && \
    chgrp -R $container_user /opt/

USER $container_user
ENV HOME=/home/$container_user

RUN echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    . /opt/conda/etc/profile.d/conda.sh && \
    conda activate base && \
    conda update -n base -c defaults conda && \
    conda install -y pip pandas && \
    conda install -c conda-forge \
        boost \
        numpy \
        matplotlib \
        scipy \
        pandas \
        geopandas \
        meshpy \
        cartopy \
        pyepsg \
        descartes \
        requests \
        sortedcontainers \
        attrs \
        libarchive \
        h5py \
        netCDF4 \
        pytest && \
    conda clean -afy

# =================================================== #
# Build Watershed Workflow ========================== #
# =================================================== #
WORKDIR ${HOME}
RUN python -m pip install GDAL==`gdal-config --version` && \
    python -m pip --no-cache-dir install --upgrade \
       fiona \
       rasterio \
       shapely \
       pyproj \
       && \
    #git clone https://github.com/ecoon/meshpy.git --depth 1 && \
    #cd meshpy && \
    #./configure.py \
    #    --python-exe=${CONDA_DIR}/bin/python \
    #    --boost-inc-dir=${CONDA_DIR}/include \
    #    --boost-lib-dir=${CONDA_DIR}/lib \
    #    --boost-python-libname=boost_python38 \
    #    --disable-static \
    #    --enable-shared \
    #    && \
    #python setup.py build && \
    #python setup.py install && \
    #cd .. && \
    #rm -rf meshpy && \

    git clone --depth 1 https://github.com/ecoon/watershed-workflow ${HOME}/watershed-workflow && \
    cp ${HOME}/watershed-workflow/watershed_workflowrc ${HOME}/.watershed_workflowrc && \
    # get Rosetta pedotransfer functions
    cd ${HOME}/watershed-workflow/workflow_tpls && \
    mkdir rosetta && cd rosetta && \
    wget http://www.u.arizona.edu/~ygzhang/rosettav3/Rosetta-3.0beta-py3.tar.gz && \
    tar xzf Rosetta-3.0beta-py3.tar.gz && \
    # Add PYTHONPATHs to ~/.bashrc
    echo "export PYTHONPATH=${HOME}/watershed-workflow:PYTHONPATH=${HOME}/watershed-workflow/workflow_tpls:\${PYTHONPATH}" >> ~/.bashrc
    # Run tests
    #pytest workflow/test/test_hilev.py
    #pytest workflow

ENV PYTHONPATH=${HOME}/watershed-workflow:PYTHONPATH=${HOME}/watershed-workflow/workflow_tpls:${PYTHONPATH}

# =================================================== #
# Build TINerator =================================== #
# =================================================== #
RUN git clone https://github.com/lanl/tinerator.git ${HOME}/tinerator --depth 1 && \
    cd ${HOME}/tinerator && \
    python -m pip install --no-cache-dir -r requirements.txt && \
    ./tpls/build-tpls.sh -A -M && \
    echo "export PYTHONPATH=${HOME}/tinerator:${HOME}/tinerator/tpls/seacas/install/lib:${HOME}/tinerator/tpls/jigsaw-python:\${PYTHONPATH}" >> ~/.bashrc

ENV PYTHONPATH=${HOME}/tinerator:${HOME}/tinerator/tpls/seacas/install/lib:${HOME}/tinerator/tpls/jigsaw-python:${PYTHONPATH}

# Configure Jupyter Notebook/Jupyter Lab settings
RUN mkdir ~/.jupyter && \
    jupyter_cfg=~/.jupyter/jupyter_notebook_config.py && \
    echo "c.JupyterApp.config_file = ''" >> $jupyter_cfg && \
    echo "c.NotebookApp.allow_root = True" >> $jupyter_cfg && \
    echo "c.NotebookApp.allow_remote_access = True" >> $jupyter_cfg && \
    echo "c.NotebookApp.ip = '*'" >> $jupyter_cfg && \
    echo "c.NotebookApp.terminado_settings = { \"shell_command\": [\"/usr/bin/bash\"] }" >> $jupyter_cfg && \
    echo "c.NotebookApp.token = u''" >> $jupyter_cfg

CMD ["jupyter", "lab", "--port=8888"]